name: 'Apply K8s Deployment'
description: >
  Applies a k8s template into a Kubernetes Cluster previously configured.
  This gets the variables to fill the template from the environment,
  so to use a variable TEST just add {{ TEST }} to your template and set
  the variable in the step on the action.
inputs:
  K8S_NAMESPACE:
    description: The namespace in which to deploy
    required: true
    default: default
  DEPLOYMENT_FILE:
    description: The template file to deploy
    required: true
    default: deploy/deployment.yml
  RESOURCE_TYPE:
    description: The kubernetes resource type
    default: deployment
    required: false
  RESOURCE_NAME:
    description: The resource to watch for rollout
    required: false
  ROLLOUT_TIMEOUT_MINUTES:
    description: The time in minutes to wait for the deployment to complete
    required: false
    default: '1'
  GKE_CLUSTER:
    description: The GCP cluster in which to deploy
    required: false
    default: ""
  GKE_CLUSTER_LOCATION:
    description: The cluster region or zone
    required: false
    default: ""
  OKE_CLUSTER:
    description: The OCI cluster OCID in which to deploy
    required: false
    default: ""
  OKE_CLUSTER_LOCATION:
    description: The OCI cluster region or zone
    required: false
    default: ""
  EXTRA_VARS:
    description: Extra variables to replace in the deployment file separated by ; in the format <NAME>=<VALUE>
    required: false
    default: ""
runs:
  using: "composite"
  steps:
  - id: check_has_gke_or_oci
    shell: bash
    run: |
      if [ -z "${{ inputs.GKE_CLUSTER }}" ]; then
        echo "NO GKE CLUSTER"
        if [ -z "${{ inputs.OKE_CLUSTER }}" ]; then
          echo "NO GKE AND NO OKE CLUSTER"
          echo "::error title=Missing Cluster::No OKE or GKE Cluster informed"
          exit 1
        else
          echo "NO GKE CLUSTER AND OKE CLUSTER AVAILABLE"
          if [ -z "${{ inputs.OKE_CLUSTER_LOCATION }}" ]; then
            echo "NO OKE CLUSTER LOCATION"
            echo "::error title=Missing OKE Cluster Location::No OKE Cluster Location informed"
            exit 2
          else
            echo "OKE CLUSTER LOCATION AVAILABLE"
            echo "::set-output name=has_gke::false"
          fi
        fi
      else
        echo "GKE CLUSTER AVAILABLE"
        if [ -z "${{ inputs.OKE_CLUSTER }}" ]; then
          echo "NO OKE CLUSTER AND GKE CLUSTER AVAILABLE"
          if [ -z "${{ inputs.GKE_CLUSTER_LOCATION }}" ]; then
            echo "NO GKE CLUSTER LOCATION"
            echo "::error title=Missing GKE Cluster Location::No GKE Cluster Location informed"
            exit 2
          else
            echo "GKE CLUSTER LOCATION AVAILABLE"
            echo "::set-output name=has_gke::true"
          fi
        else
          echo "GKE AND OKE CLUSTER AVAILABLE"
          echo "::error title=Too many Clusters::Both OKE and GKE Cluster informed"
          exit 3
        fi
      fi

# Could be used if conditionals worked or continue-on-error
#  - name: Set up GKE credentials
#    uses: google-github-actions/get-gke-credentials@v0
#    with:
#      cluster_name: ${{ inputs.GKE_CLUSTER }}
#      location: ${{ inputs.GKE_CLUSTER_LOCATION }}
  - name: Set up GKE credentials
    shell: bash
    run: |
      if [ '${{ steps.check_has_gke_or_oci.outputs.has_gke }}' == "true" ]; then
        gcloud container clusters get-credentials '${{ inputs.GKE_CLUSTER }}' --region '${{ inputs.GKE_CLUSTER_LOCATION }}'
        export KUBECONFIG=$HOME/.kube/config
      fi

  - name: Set up OKE credentials
    if: ${{ steps.check_has_gke_or_oci.outputs.has_gke }} == "false"
    shell: bash
    run: |
      if [ '${{ steps.check_has_gke_or_oci.outputs.has_gke }}' == "false" ]; then
        /home/runner/bin/oci ce cluster create-kubeconfig --cluster-id ${{ inputs.OKE_CLUSTER }} \
          --file $HOME/.kube/config  --region ${{ inputs.OKE_CLUSTER_LOCATION }} --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT
        export KUBECONFIG=$HOME/.kube/config
      fi

  - name: Replace variables in deployment
    run: |
      if [ -n '${{ inputs.EXTRA_VARS }}' ]
      then
        touch .env
        echo '${{ inputs.EXTRA_VARS }}' | sed "s/;/\n/g" | while read line; 
        do
          if [ -n "$line" ]; then
            echo "export $line" >> .env
          fi
        done
        source .env
        rm -rf .env
      fi
      perl -p -i.bak -E 's:{\{\s*(\S+?)\s*\}}:$ENV{$1} // die "$1 not set":ge' ${{ inputs.DEPLOYMENT_FILE }}
    shell: bash

  - name: Apply deployment
    run: |
      kubectl config set-context --current --namespace=${{ inputs.K8S_NAMESPACE }}
      kubectl apply -f ${{ inputs.DEPLOYMENT_FILE }}
      if [ -n "${{ inputs.RESOURCE_NAME }}" ]; then
        kubectl rollout status ${{ inputs.RESOURCE_TYPE }} ${{ inputs.RESOURCE_NAME }} --timeout=${{ inputs.ROLLOUT_TIMEOUT_MINUTES }}m
      fi
    shell: bash

