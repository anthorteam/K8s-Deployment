name: 'Apply K8s Deployment'
description: >
  Applies a k8s template into a Kubernetes Cluster previously configured.
  This gets the variables to fill the template from the environment,
  so to use a variable TEST just add {{ TEST }} to your template and set
  the variable in the step on the action.
inputs:
  K8S_NAMESPACE:
    description: The namespace in which to deploy
    required: true
    default: default
  DEPLOYMENT_FILE:
    description: The template file to deploy
    required: true
    default: deploy/deployment.yml
  RESOURCE_TYPE:
    description: The kubernetes resource type
    default: deployment
    required: false
  RESOURCE_NAME:
    description: The resource to watch for rollout
    required: false
  ROLLOUT_TIMEOUT_MINUTES:
    description: The time in minutes to wait for the deployment to complete
    required: false
    default: '1'
  GKE_CLUSTER:
    description: The GCP cluster in which to deploy
    required: false
    default: ""
  GKE_CLUSTER_LOCATION:
    description: The cluster region or zone
    required: false
    default: ""
  OKE_CLUSTER:
    description: The OCI cluster OCID in which to deploy
    required: false
    default: ""
  OKE_CLUSTER_LOCATION:
    description: The OCI cluster region or zone
    required: false
    default: ""
  AKS_CLUSTER:
    description: The Azure cluster name in which to deploy
    required: false
    default: ""
  AKS_RESOURCE_GROUP:
    description: The Azure cluster resource group
    required: false
    default: ""
  EXTRA_VARS:
    description: Extra variables to replace in the deployment file separated by ; in the format <NAME>=<VALUE>
    required: false
    default: ""
runs:
  using: "composite"
  steps:
  - name: Set up GKE credentials
    if: inputs.GKE_CLUSTER != '' && inputs.GKE_CLUSTER_LOCATION != ''
    uses: google-github-actions/get-gke-credentials@v0
    with:
      cluster_name: ${{ inputs.GKE_CLUSTER }}
      location: ${{ inputs.GKE_CLUSTER_LOCATION }}

#  - name: Set up OKE credentials
#    if: inputs.OKE_CLUSTER != '' && inputs.OKE_CLUSTER_LOCATION != ''
#    shell: bash
#    run: |
#      /home/runner/bin/oci ce cluster create-kubeconfig \
#          --cluster-id '${{ inputs.OKE_CLUSTER }}' \
#          --file $HOME/.kube/config  \
#          --region '${{ inputs.OKE_CLUSTER_LOCATION }}' \
#          --token-version 2.0.0 \
#          --kube-endpoint PUBLIC_ENDPOINT
#      export KUBECONFIG=$HOME/.kube/config
#
#  - name: Set up Az Credentials
#    if: inputs.AKS_CLUSTER != '' && inputs.AKS_RESOURCE_GROUP != ''
#    shell: bash
#    run: |
#      az aks get-credentials --name '${{ inputs.AKS_CLUSTER }}' --resource-group '${{ inputs.AKS_RESOURCE_GROUP }}'

  - name: Replace variables in deployment
    run: |
      if [ -n '${{ inputs.EXTRA_VARS }}' ]
      then
        touch .env
        echo '${{ inputs.EXTRA_VARS }}' | sed "s/;/\n/g" | while read line; 
        do
          if [ -n "$line" ]; then
            echo "export $line" >> .env
          fi
        done
        source .env
        rm -rf .env
      fi
      perl -p -i.bak -E 's:{\{\s*(\S+?)\s*\}}:$ENV{$1} // die "$1 not set":ge' '${{ inputs.DEPLOYMENT_FILE }}'
    shell: bash

  - name: Apply deployment with rollout on failure
    shell: bash
    run: |
      kubectl config set-context --current --namespace='${{ inputs.K8S_NAMESPACE }}'
      kubectl apply -f '${{ inputs.DEPLOYMENT_FILE }}'
      
      if [ -n '${{ inputs.RESOURCE_NAME }}' ]; then
        kubectl rollout status \
            '${{ inputs.RESOURCE_TYPE }}' \
            '${{ inputs.RESOURCE_NAME }}' \
            --timeout='${{ inputs.ROLLOUT_TIMEOUT_MINUTES }}m' \
        || (kubectl rollout undo deployment '${{ inputs.RESOURCE_TYPE }}' '${{ inputs.RESOURCE_NAME }}'; false)
      fi
